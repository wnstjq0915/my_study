# # 리스트(list) 자료형
# # 변수 1개에 100개의 값을 넣고 싶을 때

# [1, 2, 3, 4, 5] # ,로 구분
# ['hello', 'world', 'python'] # 리스트 속 요소들을 element라고 함
# [1, 'hello', 2, 'world'] # 타입 상관없음
# [1, 2, ['hi, bye'], 3] # 리스트 안 리스트 가능
# [] # 리스트 안에 아무것도 없어도 ㄱㅊ


li_1 = [1, 2, 3]
print(li_1)
print(len(li_1)) # 3 출력
print(li_1[0])
print(li_1[1])
print(li_1[2])
print(li_1[-1])

print(li_1[0] + li_1[2]) # 1 + 2 -> 3 출력

li_2 = [1, 2, 3, [4, 5, 6]]
print(li_2[3][0]) # 4 출력
print(li_2[3][0:1]) # 슬라이싱은 정수형이 아닌 리스트형으로 가져옴
print(li_2[3][0]) # 정수형으로 나올 것
print(type(li_2[3][0:1])) # list형
print(type(li_2[3][0])) # int형

li_3 = [1, 2, 3, 4, 5] # 값 변경 배우기
print(li_3[1:3]) # 리스트 슬라이싱 예문. [2, 3]
li_3[0] = 10
print(li_3)


# append(원소)
# 리스트의 마지막에 원소를 추가

# insert(인덱스, 원소)
# 인덱스 위치에 원소 삽입

# remove(값)
# 리스트에서 함수에 입력된 값과 같은 값을 찾아 삭제함
# 리스트에 없는 값을 삭제하려 하면 에러

# pop(인덱스)
# 리스트의 인덱스 위치의 요소를 '꺼낸다'
# 인덱스를 함수에 전달하지 않으면 제일 마지막 요소를 꺼낸다

# index(값)
# 리스트에서 값을 찾아 그 값의 인덱스를 돌려준다.
# 인덱스값을 저장할 땐 변수이름을 idx로 함
# remove와 마찬가지로 값을 찾을 수 없으면 에러

# sort()
# 리스트의 요소를 정렬한다. (오름차순)
# 내림차순으로 정렬하려면 sort(reverse = True)

# reverse()
# 리스트의 순서를 뒤집음
# 정렬 아님

# count(값)
# 리스트 안에서 해당 값이 몇 개 있는지 세는 함수
# 안에 값이 없어도 에러가 안 뜨고 0이 나옴

# extend(리스트)
# 리스트를 합침


li_4 = [1, 2, 3]
li_4.append(4) # 여러 타입 자료형 아무거나 추가 가능
print(li_4) # [1, 2, 3, 4]

li = [1, 2, 3]
li.insert(1, 10) # 1 위치에 10 추가

print(li) # [1, 10, 2, 3]
li.remove(10)
print(li) # [1, 2, 3]
li.insert(3, 1)
print(li) # [1, 2, 3, 1]
li.remove(1) # 1 삭제 (index 1 아님)
print(li) # 앞에 1만 사라짐

li.pop(1) # 1 인덱스에 있는 값 사라짐
print(li) # [2, 1]
li.pop() # 끝의 값 사라짐
print(li) # [2]

li = [1, 2, 3, 4, 5]
a = li.pop(4) # 5를 꺼내 a에 넣기
print(a) # 5
print(li) # [1, 2, 3, 4]
print(li.index(3)) # 3을 찾아 그 위치(인덱스)인 2 출력
li = [1, 2, 3, 3, 3, 2]
print(li.index(3)) # 가장 처음 3의 위치만 나옴
print(li.index(2)) # 가장 처음 2의 위치만 나옴
li = [5, 3, 1, 4, 2]
li.sort() # 내림차순 정렬
print(li) # [1, 2, 3, 4, 5]
li = [5, 3, 1, 4, 2]
li.sort(reverse = True) # 오름차순 정렬
print(li) # [5, 4, 3, 2, 1]
li = [5, 3, 1, 4, 2]
li.reverse() # 순서만 뒤집힘. 정렬X
print(li) # [2, 4, 1, 3, 5]
li = [1, 2, 2, 3, 3, 3, 3, 3]
print(li.count(2)) # 2가 2개라 2 출력
print(li.count(3)) # 3이 5개라 5 출력

li_1 = [1, 2, 3]
li_2 = [4, 5, 6]
print(li_1 + li_2) # 리스트가 합쳐짐, [1, 2, 3, 4, 5, 6]
print(li_1 * 2) # 리스트가 2번 나옴 [1, 2, 3, 1, 2, 3]
print(li_1)
li_1.extend(li_2) # 리스트가 영구적으로 합쳐짐
print(li_1)


# [[1, 2, 3],
# [4, 5, 6],
# [7, 8, 9]] # 행렬, 차원
